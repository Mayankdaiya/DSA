import java.util.*;

public class DoublyLinkedList {
    Node head;
    Node tail;
    int size;
    public class Node {
        int data;
        Node next;
        Node previous;
        Node(int data) {
            this.data = data;
            this.next = null;
            this.previous = null;
        }
    }

    //creating a method to insert an element at a first position
    public void addFirst(int data){
        Node newNode=new Node(data);
        if(head==null && tail==null)
        {
            head=tail=newNode;
            size++;
            return;
        }
        else if(head.next==null)
        {
            tail.previous=newNode;
            head=newNode;
            head.next=tail;
            tail.next=null;
            head.previous=null;
            size++;
            return;
        }
        head.previous=newNode;
        newNode.next=head;
        head=newNode;
        head.previous=null;
        size++;
    }
    //creating a method to insert an element at last position
    public void addLast(int data)
    {
        Node newNode=new Node(data);
        if(head==null && tail==null)
        {
            head=tail=newNode;
            size++;
            return;
        }
        else if(head.next==null) {
            head.next = newNode;
            tail = newNode;
            tail.previous = head;
            tail.next = null;
            head.previous = null;
            size++;
            return;
        }
        tail.next=newNode;
        newNode.previous=tail;
        tail=newNode;
        tail.next=null;
        size++;
    }

    //creating a method to insert an element at any position
    public void addAtAny(int pos,int data)
    {
        Node newNode=new Node(data);
        if(head==null && tail==null)
        {
            head=tail=newNode;
            size++;
            return;
        }
        else if(pos==1){
            newNode.next=head;
            head.previous=newNode;
            head=newNode;
            head.previous=null;
            size++;
            return;
        }
        else if(pos==(size+1)){
            tail.next=newNode;
            newNode.previous=tail;
            tail=newNode;
            tail.next=null;
            size++;
            return;
        }
        int p=1;
        Node current=head;
        while(pos!=p){
            current=current.next;
            p++;
        }
        Node temp=current.previous;
        temp.next=newNode;
        newNode.next=current;
        newNode.previous=temp;
        current.previous=newNode;
        size++;
    }

    //creating a method to delete a given value
    public void delete(int value){
        Node cv=head;
        Node temp=null;
        if(cv.data==value)
        {
            head=cv.next;
            return;
        }
        while(cv.data!=value)
        {
            cv=cv.next;
        }
        temp=cv.previous;
        temp.next=cv.next;
        size--;
    }

    //crating a method to print all elements in a list
    public void printList(){
        if(head==null && tail==null)
        {
            System.out.println("List is empty");
            return;
        }
        Node cr=head;
        while(cr!=null)
        {
            System.out.print(cr.data+"\t");
            cr=cr.next;
        }
    }

    //methods complete
    public static void main(String[] args) {
        DoublyLinkedList list=new DoublyLinkedList();
        Scanner sc=new Scanner(System.in);
        list.addFirst(3);
        list.addFirst(4);
        list.addFirst(5);
        list.addFirst(6);
        list.addFirst(7);
        list.addFirst(8);
        list.addLast(2);
        list.addAtAny(8,0);
        list.addAtAny(8,1);
        list.delete(0);
        list.printList();
        System.out.println("\n");
        System.out.println(list.size+"\n");

    }
}
