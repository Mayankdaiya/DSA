import java.util.*;

public class Deque {
    Node front;
    Node rear;
    int size;
    int rsize;
    Deque(int rsize){
        this.rsize=rsize;
    }
    public class Node {
        int data;
        Node next;
        Node previous;
        Node(int data) {
            this.data = data;
            this.next = null;
            this.previous = null;
        }
    }

    //creating a method to check deque empty or not
    public boolean isEmpty(){
        return front==null && rear==null;
    }

    //creating a method to check deque full or not
    public boolean isFull(){
        return size==rsize;
    }

    //creating a method to insert an element at a first position
    public void addFirst(int data){
        Node newNode=new Node(data);
        if(isFull()){
            System.out.println("Deque Full");
            return;
        }
        if(front==null && rear==null)
        {
            front=rear=newNode;
            size++;
            return;
        }
        else if(front.next==null)
        {
            rear.previous=newNode;
            front=newNode;
            front.next=rear;
            rear.next=null;
            front.previous=null;
            size++;
            return;
        }
        front.previous=newNode;
        newNode.next=front;
        front=newNode;
        front.previous=null;
        size++;
    }
    //creating a method to insert an element at last position
    public void addLast(int data)
    {
        Node newNode=new Node(data);
        if(isFull()){
            System.out.println("Deque Full");
            return;
        }
        if(front==null && rear==null)
        {
            front=rear=newNode;
            size++;
            return;
        }
        else if(front.next==null) {
            front.next = newNode;
            rear = newNode;
            rear.previous = front;
            rear.next = null;
            front.previous = null;
            size++;
            return;
        }
        rear.next=newNode;
        newNode.previous=rear;
        rear=newNode;
        rear.next=null;
        size++;
    }


    //creating a method to delete an element from first
    public void deleteFirst(){
        if(isEmpty()){
            System.out.println("Deque Empty");
            return;
        }
        front=front.next;
        front.previous=null;
        size--;
    }

    //creating a method to delete an element from last
        public void deleteLast(){
            if(isEmpty()){
                System.out.println("Deque Empty");
                return;
            }
            rear=rear.previous;
            rear.next=null;
            size--;
        }

    //crating a method to print all elements in a list
    public void printList(){
        if(isEmpty())
        {
            System.out.println("List is empty");
            return;
        }
        Node cr=front;
        while(cr!=null)
        {
            System.out.print(cr.data+"\t");
            cr=cr.next;
        }
    }

    //methods complete
    public static void main(String[] args) {
        Deque list=new Deque(10);
        list.addFirst(3);
        list.addFirst(4);
        list.addFirst(5);
        list.addFirst(6);
        list.addFirst(7);
        list.addFirst(8);
        list.addLast(2);
        list.deleteFirst();
        list.deleteLast();
        list.printList();
        System.out.println("\n");
        System.out.println(list.size+"\n");

    }
}


